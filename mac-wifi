#!/usr/bin/env ruby

require 'shellwords'

AIRPORT_CMD = '/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport'

def wifi_hardware_port
  @wifi_hardware_port ||= begin
    lines = `networksetup -listallhardwareports`.split("\n")
    # Produces something like this:
    # Hardware Port: Wi-Fi
    # Device: en0
    # Ethernet Address: ac:bc:32:b9:a9:9d
    #
    # Hardware Port: Bluetooth PAN
    # Device: en3
    # Ethernet Address: ac:bc:32:b9:a9:9e
    wifi_port_line_num = (0...lines.size).detect do |index|
      /: Wi-Fi$/ === lines[index]
    end
    if wifi_port_line_num.nil?
      :not_found
    else
      lines[wifi_port_line_num + 1].split(': ').last
    end
  end
end


def preferred_networks
  lines = `networksetup -listpreferredwirelessnetworks #{wifi_hardware_port}`.split("\n")
  # Produces something like this, unsorted, and with leading tabs:
  # Preferred networks on en0:
  #         LibraryWiFi
  #         @thePAD/Magma

  lines.delete_at(0)                         # remove title line
  lines.map! { |line| line.gsub("\t", '') }  # remove leading tabs
  lines.sort! { |s1, s2| s1.casecmp(s2) }    # sort alphabetically, case insensitively
  lines
end


def cycle_network
  network_name = current_network
  wifi_off
  wifi_on
  connect(network_name) if network_name
end


def wifi_on
  `networksetup -setairportpower #{wifi_hardware_port} on`
end


def wifi_off
  `networksetup -setairportpower #{wifi_hardware_port} off`
end


def connect(network_name, password = '')
  `networksetup -setairportnetwork #{wifi_hardware_port} #{Shellwords.shellescape(network_name)} #{Shellwords.shellescape(password)} 2>&1`
end


def ip_address
  `ipconfig getifaddr #{wifi_hardware_port}`
end


def remove_preferred_network(network_name)
  `sudo networksetup -removepreferredwirelessnetwork #{wifi_hardware_port} #{Shellwords.shellescape(network_name)}`
end


def wifi_on?
  lines = `#{AIRPORT_CMD} -I`.split("\n")
  ! lines.grep("AirPort: Off").any?
end


def current_network
  lines = `#{AIRPORT_CMD} -I`.split("\n")
  ssid_lines = lines.grep(/ SSID:/)
  ssid_lines.empty? ? nil : ssid_lines.first.split('SSID: ').last
end


def disconnect
  `sudo #{AIRPORT_CMD} -z`
end


def print_help
  puts "
Available commands are:

co[nnect]
cy[cle]
d[isconnect]
i[nfo]
l[s]
on
of[f]
r[m]
"
end


def awesome_print_available?
  begin
    require 'awesome_print'
    true
  rescue LoadError
    require 'pp'
    false
  end
end


def output_info
  info = {
      wifi_on: wifi_on?,
      port: wifi_hardware_port,
      network: current_network,
      ip_address: ip_address,
  }
  awesome_print_available? ? ap(info) : pp(info)
end


def validate_command_line
  if ARGV.empty?
    print_help
    exit(-1)
  end
end


def process_command_line
  validate_command_line

  command = ARGV[0]
  options = ARGV[1..-1]

  case command
    when /^cy/
      cycle_network
    when /^d/
      disconnect
    when /^co/
      connect(options.first)
    when /^l/
      puts preferred_networks
    when /^of/
      wifi_off
    when /^on/
      wifi_on
    when /^r/
      remove_preferred_network(options.first)
    when /^i/
      output_info
    else
      puts "Unrecognized command. Command and options were:\n#{ARGV.join('  ')}"
      exit(-1)
  end
end


def main
  process_command_line
end


main
